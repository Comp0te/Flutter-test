import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get advertisementPlaceholder => "Your advertisement could be here!";
  String get audio => "Audio";
  String get cameraHelperText => "Tap for photo, hold for video";
  String get confirmPassword => "Confirm password";
  String get databasePosters => "Poster`s database";
  String get email => "Email";
  String get errorBadInternetConnection => "Bad internet connection";
  String get errorCommon => "Something went wrong";
  String get errorEmail => "Incorrect email address.";
  String get errorMinPasswordLength => "Min 8 characters";
  String get errorPasswordsDoNotMatch => "Passwords don't match";
  String get errorRequestCanceled => "Request canceled";
  String get errorRequired => "This field cannot be empty.";
  String get gallery => "Gallery";
  String get googleMaps => "Google maps";
  String get hydroelectricStation => "Hydroelectric Station";
  String get kozakPalace => "Kozak Palace";
  String get loginEmail => "Sign in";
  String get loginGreetings => "Greetings!";
  String get mainMenu => "Main menu";
  String get mapNextPlace => "To next place";
  String get noCameraFound => "No Camera Found";
  String get northEast => "North-East";
  String get onlinePosters => "Online posters";
  String get password => "password";
  String get posters => "Posters";
  String get postersDB => "Poster`s database";
  String get register => "Register";
  String get registration => "Registration";
  String get southWest => "South-West";
  String get userName => "User name";
  String get zaporozhianSich => "Zaporozhian Sich";
  String getPrice(String value) => "Price - $value";
  String loginWith(String provider) => "Sign in with $provider";
}

class $ru extends S {
  const $ru();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get databasePosters => "База данных постеров";
  @override
  String get mainMenu => "Главное меню";
  @override
  String get loginGreetings => "Приветствую!";
  @override
  String get noCameraFound => "Камера не обнаружена";
  @override
  String get mapNextPlace => "К следующему месту";
  @override
  String get googleMaps => "Google карты";
  @override
  String get kozakPalace => "Казак Палац";
  @override
  String get loginEmail => "Войти";
  @override
  String get errorPasswordsDoNotMatch => "Пароли не совпадают";
  @override
  String get password => "Пароль";
  @override
  String get errorBadInternetConnection => "Плохое интернет соединение";
  @override
  String get onlinePosters => "Онлайн постеры";
  @override
  String get cameraHelperText => "Нажмите для фото, удерживайте для видео";
  @override
  String get confirmPassword => "Подтвердите пароль";
  @override
  String get errorMinPasswordLength => "Минимум 8 символов";
  @override
  String get audio => "Аудио";
  @override
  String get advertisementPlaceholder => "Здесь могла быть Ваша реклама!";
  @override
  String get email => "Адрес эл.почты";
  @override
  String get gallery => "Галерея";
  @override
  String get errorEmail => "Некорректный адрес эл.почты";
  @override
  String get zaporozhianSich => "Запорожская Сечь";
  @override
  String get errorRequired => "Это поле необходимо заполнить.";
  @override
  String get errorCommon => "Что-то пошло не так";
  @override
  String get posters => "Постеры";
  @override
  String get hydroelectricStation => "Гидроэлектростанция";
  @override
  String get userName => "Имя пользователья";
  @override
  String get postersDB => "База данных постеров";
  @override
  String get southWest => "Юго-Запад";
  @override
  String get errorRequestCanceled => "Запрос отменен";
  @override
  String get registration => "Регистрация";
  @override
  String get register => "Зарегистрироваться";
  @override
  String get northEast => "Северо-Восток";
  @override
  String loginWith(String provider) => "Войти через $provider";
  @override
  String getPrice(String value) => "Цена - $value";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ru", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ru":
          S.current = const $ru();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
